---
title: Overview of Dynamical Systems
---

```{r}
#| include: false
set.seed(42)
```

## Important concepts

- **System**: A set of interrelated variables.
- **Dynamical system**: A system in which the present state of the system depends on the previous states of the system.
- **State space**: A $p$-dimensional space constituted by all possible values taken on by the variables of a system over an exteded period of time.
- **Initial conditions**: A selected starting point in the state space.

- **Trajectory in state space**: A set of states in a state space that evolves over time from initial conditions. A single instantiation of a dynamical system.
- **Time derivative**: The instantaneous change in a variable (first derivative) and the associated higher-order changes (second and higher-order derivatives) with respect to time.
- **Phase space:** A state space that includes time derivatives (in continuous-time framework), or previous (lagged)/future values (in discrete-time framwork) of a system.
- **Phase portrait:** A geometric representation of the trajectories of a dynamical system in the phase space. Each set of initial conditions is represented by a different curve, or set of points.

- **Deterministic:** A system in which the present state is entirely dependent on previous states of the system.
- **Stochastic:** A system in which the present state is dependent on previous states of the system and random noise.

## Discrete time dynamical system

- Time is represented as integers.
- Data is equally spaced.
- Represented as

    \begin{equation}
        \mathrm{Process}_{it} = \mathrm{Process}_{i(t - 1)} + \mathrm{Change\ functions} \left( \cdot \right) + \mathrm{Random\ noise}_{it}
    \end{equation}

    - $i$ person index
    - $t$ discrete-valued time index
    - $\mathrm{Process}_{it}$ vector of observed or latent processes

## Why dynamical systems modeling?

- Study the mechanism of change (stability and change).
- Rationale for longitudinal research (Baltes & Nesselroade, 1979) 
    - intraindividual change
    - interindividual change in intraindividual change
    - interrelationships in behavioral change
    - determinants of intraindividual change
    - determinants of interindividual change in intraindividual change

See Cronbach & Furby, 1970, Nesselroade & Cable, 1974, Baltes & Nesselroade, 1979 for a historical accounting of studying change.

## Deterministic Simple Linear System

Let the change function be

\begin{equation}
    \theta_{0} + \theta_{1} y_{i(t - 1)} .
\end{equation}

The system is given by

\begin{equation}
    y_{it} = y_{i(t - 1)} + \theta_{0} + \theta_{1} y_{i(t - 1)}
\end{equation}

which simplifies to

\begin{equation}
    y_{it} = \theta_{0} + \left( 1 + \theta_{1} \right) y_{i(t - 1)}
\end{equation}

Let $\alpha = \theta_{0}$ and $\beta = 1 + \theta_{1}$. The deterministic simple linear system is given by

\begin{equation}
    y_{it} = \alpha + \beta y_{i(t - 1)} .
\end{equation}

Set an initial value $y_{i, 0}$ and then apply the function recursively.

```{r}
#| echo: false
alpha <- 8
beta <- 0.8
y_0 <- 0.0
max_time = 100
error_variance <- 1
key <- c(
  "alpha",
  "beta",
  "y_0",
  "error_variance",
  "max_time"
)
value <- c(
  alpha,
  beta,
  y_0,
  error_variance,
  max_time
)
description <- c(
  "Intercept",
  "Slope",
  "Initial value",
  "Error variance",
  "Maximum time"
)
symbol <- c(
  "$\\alpha$",
  "$\\beta$",
  "$y_{i, 0}$",
  "$\\sigma^{2}$",
  "$T$"
)
tab <- cbind(
  key,
  value,
  symbol,
  description
)
knitr::kable(tab, col.names = c("Variable", "Value", "Symbol", "Description"))
```

```{r}
#' Deterministic Simple Linear System Function Constructor
#' 
#' @param alpha Numeric.
#'   Intercept \eqn{\alpha}.
#' @param beta Numeric.
#'   Slope \eqn{\beta}.
linear_constructor <- function(alpha,
                               beta) {
  return(
    function(y) {
      return(
        alpha + beta * y
      )
    }
  )
}
```

```{r}
# create function given alpha and beta
f <- linear_constructor(alpha = alpha, beta = beta)
# initialize vector of doubles of length max_time
y <- double(max_time)
# set initial value y_0 to the first element in y
y[1] <- y_0
# recursively apply the function from 2 to max_time and save results to y[2:max_time]
for (time in 2:max_time) {
  y[time] <- f(y[time - 1])
}
```

```{r}
#| echo: false
plot(
  y,
  xlab = "Time",
  ylab = expression(y[t]),
  main = substitute(
    paste(
      "Deterministtic System (",
      alpha,
      " = ",
      alpha_i,
      ", ",
      beta,
      " = ",
      beta_i,
      ")"
    ),
    list(
      alpha_i = alpha,
      beta_i = beta
    )
  )
)
```

We can add random noise to the system

\begin{equation}
    y_{it} = \alpha + \beta y_{i(t - 1)} + \varepsilon_{it}
\end{equation}

\begin{equation}
    \varepsilon_{it} \sim \mathcal{N} \left( \mu = 0, \sigma^{2} \right)
\end{equation}

```{r}
epsilon <- stats::rnorm(n = max_time, mean = 0, sd = sqrt(error_variance))
```

```{r}
#| echo: false
hist(epsilon, main = "Histogram of random noise", xlab = expression(epsilon[it]))
```

```{r}
y_stochastic <- y + epsilon
```

```{r}
#| echo: false
plot(
  y_stochastic,
  xlab = "Time",
  ylab = expression(y[t]),
  main = substitute(
    paste(
      "Stochastic System (",
      alpha,
      " = ",
      alpha_i,
      ", ",
      beta,
      " = ",
      beta_i,
      ", ",
      epsilon[it],
      " ~ ",
      N,
      "(",
      mu,
      " = ",
      0,
      ", ",
      sigma^2,
      " = ",
      error_variance_i,
      "))"
    ),
    list(
      alpha_i = alpha,
      beta_i = beta,
      error_variance_i = error_variance
    )
  )
)
```
